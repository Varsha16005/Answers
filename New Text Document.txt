1)a)Factorial

read num
fact=1
for((i=1;i<=num;i++))
{
  fact=$((fact * i))
}
echo $fact

===============================================

2)a)Fibonacci series

read n 
j=0
f=1
echo $j
echo $f
for((i=0;i<n;i++)){
    k=$((j+f))
    j=$f
    f=$k
    echo $k
}

=======================================================

4)a),8)a)Sum of n numbers

read n
sum=0
for((i=1;i<=n;i++))
{
  sum=$((sum + i)) 
}
echo $sum

===================================================

5)a)Greater of  numbers

read a b c
if [ $a -gt $b ] && [ $a -gt $c ]
then
  echo $a is greater
elif [ $b -gt $a ] && [ $b -gt $c ]
then
  echo $b is greater
else
  echo $c is greater
fi

==================================================

9)a)Menu driven shell

echo choice 1 : To find the given year is leap year or not
echo choice 2 : To find given number is positive, negative or neither
read choice
case $choice in
1)echo Enter the year :
read n
c=$((n%4))
if [ $c -eq 0 ]
then
echo Leap Year
else
echo Not Leap Year
fi
;;
2)echo Enter the number :
read n
if [ $n -gt 0 ]
then
echo Positive
elif [ $n -lt 0 ]
then 
echo Negative
else
echo Zero
fi
;;
*)echo Enter the correct choice
;;
esac

=================================================

10)a)Odd/Even

read n
c=$((n%2))
if [ $c -eq 0 ]
then
echo Even
else
echo Odd
fi

=================================================

3)b),9)b)ii)FCFS Disk Scheduling

#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin>>n;
    int disk[n];
    for(int i=0;i<n;i++){
        cin>>disk[i];
    }
    int head;
    cin>>head;
    int tot=0,move=0;
    for(int i=0;i<n;i++){
        tot+=abs(head-disk[i]);
        head=disk[i];
        move++;
    }
    cout<<tot<<endl;
    cout<<move;    
}

======================================================

9)b)i)STAT System Calls

#include<stdio.h>
#include<sys/stat.h>
#include<stdlib.h>
int main(){
    struct stat s;
    int a,b;
    if(stat("/home",&s)==(-1)){
        printf("Error");
        exit(0);
    }
    a=s.st_blksize;
    b=s.st_size;
    printf("first%d",a);
    printf("\n Second %d",b);
}
=========================================================

7)a)Process System call

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
void main()
{
int pid;
pid=fork();
if (pid < 0)
{
printf("The fork cannot be created");
exit(0);
}
else if (pid==0)
{
execlp("/home/ls","ls",NULL);
printf("\n The process id of the child: %d", getpid());
printf("\n The process id of the parent: %d", getppid());
}
else{
printf("\n The process id of the parent: %d", getpid());
printf("\n The process id of the grandparent: %d", getppid());
}
}

=======================================================

5)b),10)b)i)FIFO Page Replacement Algorithm

#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin>>n;
    int a[50],b[10];
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    int m;
    cin>>m;
    for(int i=0;i<m;i++){
        b[i]=-1;
    }
    int count=0,avail,j=0;
    for(int i=0;i<n;i++){
        cout<<a[i]<<"\t";
        avail=0;
        for(int k=0;k<m;k++){
            if(b[k]==a[i]){
                avail=1;
                break;
            }
        }
        if(avail==0){
            b[j]=a[i];
            j=(j+1)%m;
            count++;
        }
        for(int i=0;i<m;i++){
            cout<<b[i]<<" ";
        }
        cout<<endl;
    }
    cout<<endl<<count;
}

=============================================================

8)b)Priority Scheduling

#include <bits/stdc++.h>
using namespace std;
int main() {
    int n;
    cin >> n;
    int pri[n], bt[n], idx[n], wt[n], tat[n];
    for (int i = 0; i < n; i++) {
        cout << "Priority of P" << (i + 1) << ": ";
        cin >> pri[i];
        cout << "Burst time of P" << (i + 1) << ": ";
        cin >> bt[i];
        idx[i] = i;
    }
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (pri[i] > pri[j] || (pri[i] == pri[j] && idx[i] > idx[j])) {
                swap(pri[i], pri[j]);
                swap(bt[i], bt[j]);
                swap(idx[i], idx[j]);
            }
        }
    }
    int ct = 0;
    for (int i = 0; i < n; i++) {
        wt[idx[i]] = ct;
        ct += bt[i];
        tat[idx[i]] = ct;
    }
    cout << "P Wait Turnaround\n";
    double avg_wt = 0, avg_tat = 0;
    for (int i = 0; i < n; i++) {
        cout << i + 1 << " " << wt[i] << " " << tat[i] << endl;
        avg_wt += wt[i];
        avg_tat += tat[i];
    }
    cout << "Avg Wait Time: " << avg_wt / n << endl;
    cout << "Avg Turnaround Time: " << avg_tat / n << endl;
}

===================================================

7)b)Banker's Algorithm

#include <bits/stdc++.h>
using namespace std;
int main() {
    int n, m;
    cin >> n;
    cin >> m;
    int avail[m];
    for (int i = 0; i < m; i++) { 
        cin >> avail[i];
    }
    int alloc[n][m];
    int maxi[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> alloc[i][j];
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> maxi[i][j];
        }
    }
    int need[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = maxi[i][j] - alloc[i][j];
        }
    }
    bool finish[n];
    vector<int> safe;
    int work[m];
    for (int i = 0; i < m; i++) {
        work[i] = avail[i];
    }

    int count = 0;
    while (count < n) {
        int f=0;
        for (int i = 0; i < n; i++) {
            if (!finish[i]) {
                int k=1;
                for (int j = 0; j < m; j++) {
                    if (need[i][j] > work[j]) {
                        k = 0;
                        break;
                    }
                }
                if (k) {
                    for (int j = 0; j < m; j++) {
                        work[j] += alloc[i][j];
                    }
                    finish[i] = true;
                    safe.push_back(i);
                    f = 1;
                    count++;
                }
            }
        }
        if (!f) {
            break; 
        }
    }
    if (safe.size() == n) {
        cout << "System is in a safe state.\n";
        cout << "Safe Sequence: ";
        for (int i = 0; i < safe.size(); i++) {
            cout << "P" << safe[i] << " ";
        }
        cout << endl;
    } else {
        cout << "System is not in a safe state.\n";
    }
    return 0;
}

=============================================

6)b)SJF Scheduling

#include <iostream>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cin >> n;
    int bt[n], wt[n], tat[n];
    for (int i = 0; i < n; i++) {
        cin >> bt[i];
    }
    sort(bt, bt + n);
    wt[0] = 0;
    tat[0] = bt[0];
    for (int i = 1; i < n; i++) {
        wt[i] = wt[i - 1] + bt[i - 1];
        tat[i] = wt[i] + bt[i];
    }
    cout << "Process\twaitTime\ttat\n";
    double tot_wt = 0, tot_tat = 0;
    for (int i = 0; i < n; i++) {
        cout << i + 1 << "\t" << wt[i] << "\t\t" << tat[i] << endl;
        tot_wt += wt[i];
        tot_tat += tat[i];
    }
    cout << tot_wt / n <<endl;
    cout<< tot_tat / n << endl;
}

=========================================================

2)b)FIFO CPU Scheduling

#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    int bt[n], tat[n], wt[n];
    for (int i = 0; i < n; i++) {
        cin >> bt[i];
    }
    tat[0] = bt[0];
    wt[0] = 0;
    for (int i = 1; i < n; i++) {
        wt[i] = wt[i - 1] + bt[i - 1];
        tat[i] = wt[i] + bt[i];
    }
    double total_tat , total_wt ;
    for (int i = 0; i < n; i++) {
        total_tat += tat[i];
        total_wt += wt[i];
    }
    cout << "Burst Time\tTurn Around Time\tWait Time\n";
    for (int i = 0; i < n; i++) {
        cout << bt[i] << "\t\t" << tat[i] << "\t\t\t" << wt[i] << "\n";
    }
    cout << "Average Turn Around Time = " << total_tat / n << "\n";
    cout << "Average Waiting Time = " << total_wt / n << "\n";

}

===========================================================

4)b)Producer/Consumer

#include <iostream>
using namespace std;

int main() {
    int count = 0, front = 0, rear = 0, pp = 0, cp = 0, n;
    int buffer[25];
    cin >> n;
    cout << "\nOptions:\n1: Producer item\n2: Consumer item\n3: View buffer\n4: Exit\n";
    while (true) {
        int ch;
        cin >> ch;
        if (ch == 4) {
            break;
        }
        if (ch == 1) {
            int item;
            if (count < n) {
                cin >> item;
                buffer[front] = item;
                front = (front + 1) % 5;
                count++;
                if (cp == 1 && count == 1) {
                    cout << "\nConsumer is now ready\n";
                }
            } else {
                pp = 1;
            }
        } else if (ch == 2) {
            if (count > 0) {
                cout << "\nC: " << buffer[rear] << endl;
                buffer[rear] = ' ';
                rear = (rear + 1) % 5;
                count--;
                if (pp == 1 && count == 4){
                    cout << "\nProducer is now ready\n";
                }
            } else {
                cp = 1;
            }
        } else if (ch == 3) {
            for (int i = 0; i < n; i++) {
                cout << "- " << buffer[i] << " ";
            }
            cout << endl;
        } else {
            cout << "Enter correct choice\n";
        }
    }
}

============================================================

3)a)File Operations

# You are using bash
#!/bin/bash

while true; do
    echo "MENU"
    echo "1. cat"
    echo "2. cp"
    echo "3. mv"
    echo "4. wc"
    echo "5. grep -option"
    echo "6. head -n"
    echo "7. tail -n"
    echo "8. sort -option"
    echo "Enter your choice:"
    read choice

    case $choice in
        1)
            echo "Enter the file name:"
            read file
            cat "$file"
            ;;
        2)
            echo "Enter source file name:"
            read s
            echo "Enter destination file name:"
            read d
            cp "$s" "$d"
            ;;
        3)
            echo "Enter source file name:"
            read s
            echo "Enter destination file name:"
            read d
            mv "$s" "$d"
            ;;
        4)
            echo "Enter the file name:"
            read file
            wc "$file"
            ;;
        5)
            echo "Enter the file name:"
            read file
            echo "Enter the option (v, n, c):"
            read option
            echo "Enter the word:"
            read word
            grep -"$option" "$word" "$file"
            ;;
        6)
            echo "Enter the file name:"
            read file
            echo "Enter number of lines to display:"
            read n
            head -"$n" "$file"
            ;;
        7)
            echo "Enter the file name:"
            read file
            echo "Enter number of lines to display:"
            read n
            tail -"$n" "$file"
            ;;
        8)
            echo "Enter the file name:"
            read file
            echo "Enter the option:"
            read option
            sort -"$option" "$file"
            ;;
        *)
            echo "Enter the correct choice"
            ;;
    esac
done

====================================================





